@model ERPElectrodata.Models.TICKET

@{
    //Layout = null;
    Layout = "~/Views/Shared/_LayoutKendo22.cshtml";
}
<style>
    .k-floating-label-container {
        width: 100%;
    }
    .k-checkbox::before {
        content: none
    }
</style>
<link href="~/Content/themes/plugin/select2/select2.css" rel="stylesheet" />
<script src="~/Content/themes/plugin/select2/select2.full.js"></script>
<link href="~/Content/themes/plugin/datepicker/datepicker3.css" rel="stylesheet" />
<script src="~/Content/themes/plugin/datepicker/bootstrap-datepicker.js"></script>
<script src="~/Content/themes/plugin/toastr/toastr.min.js"></script>
<link href="~/Content/themes/plugin/toastr/toastr.min.css" rel="stylesheet" />
<link href="~/Content/FindTicket.css" rel="stylesheet" />
<input type="hidden" id="IdIdioma" name="IdIdioma" value="@Session["IdIdioma"]" />

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <div class="page-title-icon">
                <i class="fa fa-user-check icon-gradient bg-sunny-morning"> </i>
            </div>
            <div>
                Busqueda avanzada
                <div class="page-title-subheading">

                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="main-card mb-3 card">
            @using (Html.BeginForm("ExportFindTicket", "Ticket", FormMethod.Post, new { id = "FrmFindTicket" }))
            {
                @Html.ValidationSummary(true)
                <div class="card-body">
                    <input type="hidden" name="HD_Estados" id="HD_Estados" value="" />
                    <input type="hidden" name="Estados" id="Estados" />
                    <input type="hidden" name="CompsFinal" id="CompsFinal" />
                    <input type="hidden" name="OPS" id="OPS" />
                    <div class="card-title">Buscar Ticket</div>


                <div class="form-row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @*<label id="txtCodigoTicket" for="txtCodigoTicket" class="right">Código Ticket </label>*@
                            @*@Html.TextBoxFor(model => model.COD_TICK, new { @class = "width100", @placeholder = "Código del Ticket" })
                    @Html.ValidationMessageFor(model => model.COD_TICK)*@
                            <input id="COD_TICK" name="COD_TICK" style="width: 100%;height:30px;" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtEstado" for="txtEstado" class="">Estado </label>
                            <select id="ID_STAT_END" class="select2" multiple="multiple" type="text" style="width:100%"></select>

                        </div>

                    </div>


                </div>
                <div class="form-row">
                    <div class="col-md-6" style="display:none;">
                        <div class="form-group">
                            <label id="txtCompaniaS" for="txtCompaniaS" class="">Ficticio</label>
                            @*@Html.Editor("FICTICIO")*@
                            <input id="FICTICIO" name="FICTICIO" style="display:none;" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtCompaniaS" for="txtCompaniaS" class="">Compañia Solicitante </label>
                            @Html.EditorFor(model => model.ID_COMP, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ID_COMP)
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtCompaniaF" for="txtCompaniaF" class="">Compañía Final </label>
                            @if (ViewBag.Account == 4)
                            {<select id="ID_COMP_END" class="form-control" multiple="multiple" type="text" style="width:100%"></select> }
                            else
                            {@Html.EditorFor(model => model.ID_COMP_END, new { @class = "form-control" })}

                            @Html.ValidationMessageFor(model => model.ID_COMP_END)
                        </div>
                    </div>

                </div>
                @if (@ViewBag.ID_ACCO == 4)
                {
                    <div class="form-row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label id="txtFinicioOP" for="txtFinicioOP" class="">Fecha Inicio OP </label>
                                @Html.TextBox("START_DATE_OP")
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label id="txtFfinOP" for="txtFfinOP" class="">Fecha Fin OP </label>
                                @Html.TextBox("END_DATE_OP")
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <div class="d-flex">
                                    <label id="txtOP" for="txtOP" class="flex-grow-1">OP</label>
                                    <input type="checkbox" id="chbxMostrarOPCerradas" />
                                </div>
                                @Html.ListBoxFor(model => model.IdProyectoSLA, new SelectList(new List<SelectListItem>(), "Value", "Text"), new { @class = "form-control", multiple = "multiple", data_bind = "value: IdProyectoSLA" })
                                @Html.ValidationMessageFor(model => model.IdProyectoSLA)
                            </div>
                        </div>
                    </div>
                }

                <div class="form-row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtSolicitante" for="txtSolicitante" class="">Solicitante </label>
                            @Html.EditorFor(model => model.ID_PERS_ENTI)
                            @Html.ValidationMessageFor(model => model.ID_PERS_ENTI)
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtUsuarioF" for="txtUsuarioF" class="">Usuario Final </label>
                            @Html.EditorFor(model => model.ID_PERS_ENTI_END)
                            @Html.ValidationMessageFor(model => model.ID_PERS_ENTI_END)
                        </div>
                    </div>

                </div>
                <div class="form-row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtAreaResponsable" for="txtAreaResponsable" class="">Área Responsable </label>
                            @Html.EditorFor(model => model.ID_QUEU)
                            @Html.ValidationMessageFor(model => model.ID_QUEU)
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtAsignadoa" for="txtAsignadoa" class="">Asignado a </label>
                            @Html.EditorFor(model => model.ID_PERS_ENTI_ASSI)
                            @Html.ValidationMessageFor(model => model.ID_PERS_ENTI_ASSI)
                        </div>
                    </div>

                </div>
                <div class="form-row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtTipoTicket" for="txtTipoTicket" class="">Tipo Ticket </label>
                            @Html.EditorFor(model => model.ID_TYPE_TICK)
                            @Html.ValidationMessageFor(model => model.ID_TYPE_TICK)
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtPrioridad" for="txtPrioridad" class="">Prioridad </label>
                            @Html.EditorFor(model => model.ID_PRIO)
                            @Html.ValidationMessageFor(model => model.ID_PRIO)
                        </div>
                    </div>

                </div>
                <div class="form-row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtUnidad" for="txtUnidad" class="">Unidad de Negocio </label>
                            @Html.EditorFor(model => model.ID_CATE)
                            @Html.ValidationMessageFor(model => model.ID_CATE)
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtMacro" for="txtMacro" class="">Macroservicio </label>
                            @Html.Editor("ID_SUB_CATE")
                        </div>
                    </div>

                </div>
                <div class="form-row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtServicio" for="txtServicio" class="">Servicio </label>
                            @Html.Editor("ID_CLAS")
                            @Html.ValidationMessageFor(model => model.ID_CATE)
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtInciReque" for="txtInciReque" class="">Incidente/Requerimiento </label>
                            @Html.Editor("ID_SUB_CLAS")
                        </div>
                    </div>

                </div>
                <div class="form-row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtMedio" for="txtMedio" class="">Medio de Comunicación </label>
                            @Html.EditorFor(model => model.ID_SOUR)
                            @Html.ValidationMessageFor(model => model.ID_SOUR)
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @*<label id="txtComentario" for="txtComentario" class="">Comentario </label>*@
                            @*@Html.TextBoxFor(model => model.SUM_TICK, new { @class = "form-control", @placeholder = "Comentario" })
                    @Html.ValidationMessageFor(model => model.SUM_TICK)*@
                            <input id="SUM_TICK" name="SUM_TICK" style="width: 100%;height:30px;" />
                        </div>
                    </div>

                </div>
                <div class="form-row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtFinicio" for="txtFinicio" class="">Fecha Inicio </label>
                            @Html.TextBox("START_DATE")
                            @Html.ValidationMessageFor(model => model.MODIFIED_TICK)
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtFfin" for="txtFfin" class="">Fecha Fin </label>
                            @Html.TextBox("END_DATE")
                            @Html.ValidationMessageFor(model => model.DELETE_TICK)
                        </div>
                    </div>

                </div>
                <div class="form-row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="chServicio" for="chServicio" class="">Servicio </label>
                            @Html.CheckBox("SERVICE", false)
                            @Html.ValidationMessageFor(model => model.SERVICE)
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="txtCreadopor" for="txtCreadopor" class="">Creador por </label>
                            @Html.EditorFor(model => model.UserId)
                            @Html.ValidationMessageFor(model => model.UserId)
                        </div>
                    </div>

                </div>
                <div class="form-row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label id="chServicio" for="chServicio" class="">Fecha Programada </label>
                            @Html.TextBox("FechaProgramada")
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label id="" for="" class="">&nbsp; </label>
                            <button id="find" class="mb-2 mr-2 btn-pill btn btn-primary btn-block"><span>Buscar</span></button>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label id="" for="" class="">&nbsp; </label>
                            <button id="export" class="mb-2 mr-2 btn-pill btn btn-success btn-block" onclick="Exportar();"><span>Exportar</span></button>
                        </div>
                    </div>


                </div>

            </div>
            }
        </div>
    </div>

    @{
        if (Convert.ToInt32(Session["ID_ACCO"].ToString()) == 1 || Convert.ToInt32(Session["ID_ACCO"].ToString()) == 25 || Convert.ToInt32(Session["ID_ACCO"].ToString()) == 4)
        {

        }
        else
        {
            <div class="col-md-3">
                <div class="main-card mb-3 card">
                    <div class="card-body">
                        <div class="card-title">Tickets Por Estado</div>

                        <div id="pie"></div>


                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="main-card mb-3 card">
                    <div class="card-body">
                        <div class="card-title">Tickets Por Estado</div>

                        <div id="line"></div>


                    </div>
                </div>
            </div>
        }

    }


</div>


<div id="gridTickets" class="contentView">

</div>
<div style="clear:both;"></div>
<div id="pagerTickets" class="contentViewPager">
</div>

<div id="listViewFindTicket"></div>
<br />

@*Pantalla de Carga*@
<div id="loading" class="loadingScreen">
    <img src="~/Images/spinner.gif" alt="loading" />
</div>

<script type="text/javascript">
    //Cargas del formulario
    function loadListCompanyByAccount() {
        return new Promise(resolve => {
            $.ajax({
                url: "/AccountEntity/ListCompanyByAccount",
                type: 'GET',
                success: function (result) {
                    //do the necessary updations
                    resolve(result)
                },
                error: function (result) {
                    resolve(null)
                }
            });

        })
    }

    function loadListByAcco() {
        return new Promise(resolve => {
            $.ajax({
                url: "/AccountQueue/ListByAcco",
                type: 'GET',
                success: function (result) {
                    //do the necessary updations
                    resolve(result)
                },
                error: function (result) {
                    resolve(null)
                }
            });

        })
    }

    function loadAssigned() {
        return new Promise(resolve => {
            $.ajax({
                url: "/AccountEntity/AssigneForFind",
                type: 'GET',
                success: function (result) {
                    //do the necessary updations
                    resolve(result)
                },
                error: function (result) {
                    resolve(null)
                }
            });

        })
    }
    //Cargas Grafica
    function loadListGraphics() {
        //$("#pie").empty()

        //$("#pie").append("<div id='Mensaje' style='text-align: center;'>" +
        //    "<br /><br /><br /><br /><br /><br /><h4>Cargando...</h4><br /><img src='../../Images/spinner.gif' style='height: 30%; width: 30%; text-align: center;'></div>");
        //$("#line").empty()

        //$("#line").append("<div id='Mensaje' style='text-align: center;'>" +
        //    "<br /><br /><br /><br /><br /><br /><h4>Cargando...</h4><br /><img src='../../Images/spinner.gif' style='height: 30%; width: 30%; text-align: center;'></div>");

        return new Promise(resolve => {
            var IdEstados = new String($("#ID_STAT_END").val());

            if (IdEstados == null || IdEstados == "null") {
                IdEstados = 0;
            }
            $.ajax({
                url: "/Ticket/FindResultGrafico/0?" + $('#FrmFindTicket').serialize() + "&IdEstados=" + IdEstados + "&skip=0&take=0",
                type: 'GET',
                success: function (result) {
                    //do the necessary updations
                    resolve(result)
                },
                error: function (result) {
                    resolve(null)
                }
            });
        })
    }


    //Cargas Tickets
    function loadListTickets() {
        return new Promise(resolve => {
            var IdEstados = new String($("#ID_STAT_END").val());
            if (IdEstados == null || IdEstados == "null") {
                IdEstados = 0;
            }
            var IdProyectos = new String($("#IdProyectoSLA").val());

            console.log(IdProyectos);

            if (IdProyectos == null || IdProyectos == "null") {
                IdProyectos = 0;
            }
            var urls = "/Ticket/FindResultTicket/0?" + $('#FrmFindTicket').serialize() + "&IdEstados=" + IdEstados;

            if ("@ViewBag.Account" == "4") {
                var IdComps = new String($("#ID_COMP_END").val());
                debugger;
                console.log(IdComps)
                if (IdComps == null || IdComps == "null") {
                    IdComps = 0;
                    debugger;
                }
                console.log(IdComps)
                urls = "/Ticket/FindResultTicket/0?" + $('#FrmFindTicket').serialize() + "&IdEstados=" + IdEstados + "&IdComps=" + IdComps + "&IdProyectos=" + IdProyectos;
            }

            $.ajax({
                url: urls,
               /* url: "/Ticket/FindResultTicket/0?" + $('#FrmFindTicket').serialize() + "&IdEstados=" + IdEstados,*/
                type: 'GET',
                success: function (result) {
                    //do the necessary updations
                    resolve(result)
                },
                error: function (result) {
                    resolve(null)
                }
            });
        })
    }



    function actualizarContenido() {
        $("#pie").empty()

        $("#pie").append("<div id='Mensaje' style='text-align: center;'>" +
            "<br /><br /><br /><br /><br /><br /><h4>Cargando...</h4><br /><img src='../../Images/spinner.gif' style='height: 30%; width: 30%; text-align: center;'></div>");
        $("#line").empty()

        $("#line").append("<div id='Mensaje' style='text-align: center;'>" +
            "<br /><br /><br /><br /><br /><br /><h4>Cargando...</h4><br /><img src='../../Images/spinner.gif' style='height: 30%; width: 30%; text-align: center;'></div>");

        if(parseInt(@Session["ID_ACCO"]) == 1 || parseInt(@Session["ID_ACCO"]) == 25 || parseInt(@Session["ID_ACCO"]) == 4){
            Promise.all([
                loadListTickets()

            ]).then((results) => {
                const listaTickets = results[0]
                ListarTicketPorEstado(listaTickets)

            })

        }

        else {
            Promise.all([
                loadListGraphics(),
                loadListTickets()

            ]).then((results) => {
                const listaTicketsGrafico = results[0]
                const listaTickets = results[1]
                Graficos(listaTicketsGrafico)
                ListarTicketPorEstado(listaTickets)

            })
        }


    }

    function cargarContenidoFormulario(results) {
        const listCompanyByAccount = results[0]
        const listByAcco = results[1]
        const listAssigned = results[2]
        $("#ID_STAT_END").select2({
            placeholder: 'Seleccione...',
            minimumInputLength: 0,
            multiple: true,
            allowClear: true,
            ajax: {
                url: "/StatusTicket/ListarEstado",
                dataType: 'json',
                quietMillis: 100,
                data: function (params) {
                    return {
                        q: params.term,
                        page: params.page
                    };
                },
                processResults: function (data, page) {
                    return { results: data };
                },
            },
        });
        $("#ID_COMP").kendoComboBox({
            autoBind: false,
            dataTextField: "COM_NAME",
            dataValueField: "ID_ENTI",
            suggest: true,
            dataSource: {
                data: listCompanyByAccount.Data,
                serverPaging: false,
                serverFiltering: false
            },
            change: function (e) {
                // Habilitar o deshabilitar el multiselector según si se selecciona un valor en ID_COMP
                var enableMultiSelect = e.sender.value() !== ""; // Verificar si se seleccionó un valor en ID_COMP
                IdProyecto.enable(enableMultiSelect); // Habilitar o deshabilitar el multiselector
                IdProyecto.dataSource.read(); // Recargar los datos del multiselector
            }
        }).data("kendoComboBox");

        if ("@ViewBag.Account" == "4") {
            var ID_COMP_END = $("#ID_COMP_END").kendoMultiSelect({
                autoBind: false,
                dataTextField: "COM_NAME",
                dataValueField: "ID_ENTI",
                filter: "contains",
                suggest: true,
                dataSource: {
                    data: listCompanyByAccount.Data,
                    serverPaging: false,
                    serverFiltering: false
                }
            }).data("kendoComboBox");
        } else {

            var ID_COMP_END = $("#ID_COMP_END").kendoComboBox({
                autoBind: false,
                dataTextField: "COM_NAME",
                dataValueField: "ID_ENTI",
                filter: "contains",
                suggest: true,
                dataSource: {
                    data: listCompanyByAccount.Data,
                    serverPaging: false,
                    serverFiltering: false
                }
            }).data("kendoComboBox");
        }

        

        var IdProyecto = $("#IdProyectoSLA").kendoMultiSelect({
            placeholder: "Número de OP",
            cascadeFrom: "ID_COMP",
            dataTextField: "NUM_DOCU_SALE",
            dataValueField: "ID_DOCU_SALE",
            template: '<div style="text-transform:capitalize; display: inline-block; width:100%;">' +
                '<div style="float:left;"><strong>${data.NUM_DOCU_SALE}</strong></div><br/>' +
                '<div style="float:left; ">${data.Titulo}</div>' +
                '</div>',
            autoBind: false,
            dataSource: {
                serverFiltering: true,
                schema: {
                    data: "Data",
                    total: "Count"
                },
                transport: {
                    //read: "/OrderForm/ListarCboOPEnFindTicket",
                    read: {
                        url: function () {
                            return `/OrderForm/ListarCboOPEnFindTicket?valOpCerrada=${$("#chbxMostrarOPCerradas").prop('checked')}&valOpInicio=${$("#START_DATE_OP").val()}&valOpFin=${$("#END_DATE_OP").val()}`;
                        }
                    }
                },
                filter: { // Filtrar por el valor actual de ID_COMP
                    field: "ID_ENTI",
                    operator: "eq",
                    value: function () {
                        return $("#ID_COMP").data("kendoComboBox").value();
                    }
                }
            },
            change: function () {
                // Puedes agregar lógica adicional si es necesario cuando cambia la selección
            }
        }).data("kendoMultiSelect");

        var START_DATE_OP = $("#START_DATE_OP").kendoDatePicker({
            format: "MM/dd/yyyy",
            change: function (e) {
                IdProyecto.dataSource.read()
            }
        }).data("kendoDatePicker");

        var END_DATE_OP = $("#END_DATE_OP").kendoDatePicker({
            format: "MM/dd/yyyy",
            change: function () {
                IdProyecto.dataSource.read()
            }
        }).data("kendoDatePicker");

        var IdCheckBoxMostrarOPCerradas = $("#chbxMostrarOPCerradas").kendoCheckBox({
            size: "medium",
            checked: false,
            label: "Mostrar OP Cerradas",
            change: function (e) {
                console.log($("#chbxMostrarOPCerradas").prop('checked'))
                IdProyecto.dataSource.read()
            }
        })

        // Deshabilitar el multiselector inicialmente
        /*IdProyecto.enable(false);*/

        var ID_QUEU = $("#ID_QUEU").kendoComboBox({
            autoBind: false,
            filter: "contains",
            dataTextField: "DES_QUEU",
            template: '<div style="text-transform:capitalize; display: inline-block; width:100%; height:35px; position:relative; ">' +
                '<span><strong>${data.QUEU}</strong></span><br />' +
                '<span style="font-size:.9em; top:15px;">${data.DES_QUEU}</span></div>',
            dataValueField: "ID_QUEU",
            dataSource: {
                data: listByAcco.Data,
                serverPaging: false,
                serverFiltering: false
            }
        }).data("kendoComboBox");
        var ID_CATE = $("#ID_CATE").kendoComboBox({
            autoBind: false,
            index: -1,
            dataTextField: "NAM_CATE",
            filter: "contains",
            //template: '<div style="text-transform:capitalize; display: inline-block; width:100%;">' +
            //                          '<div style="float:left;">${data.ASSI}</div>' +
            //                          '<div style="float:right; ">(WL ${data.WorkLoad})</div>' +
            //                      '</div>',
            dataValueField: "ID_CATE",
            dataSource: {
                //type: "odata",
                serverFiltering: false,
                schema: {
                    data: "Data",
                    total: "Count"
                },
                transport: {
                    read: "/CategoryTicket/ListCategory?var=" + Math.random()
                }
            }
        }).data("kendoComboBox");
        var ID_SUB_CATE = $("#ID_SUB_CATE").kendoComboBox({
            autoBind: false,
            index: -1,
            dataTextField: "NAM_CATE",
            filter: "contains",
            cascadeFrom: "ID_CATE",
            dataValueField: "ID_CATE",
            dataSource: {
                serverFiltering: true,
                schema: {
                    data: "Data",
                    total: "Count"
                },
                transport: {
                    read: "/CategoryTicket/ListCategory?var=" + Math.random()
                }
            }
        }).data("kendoComboBox");
        var ID_CLAS = $("#ID_CLAS").kendoComboBox({
            autoBind: false,
            index: -1,
            dataTextField: "NAM_CATE",
            filter: "contains",
            cascadeFrom: "ID_SUB_CATE",
            dataValueField: "ID_CATE",
            dataSource: {
                serverFiltering: true,
                schema: {
                    data: "Data",
                    total: "Count"
                },
                transport: {
                    read: "/CategoryTicket/ListCategory?var=" + Math.random()
                }
            }
        }).data("kendoComboBox");
        var ID_SUB_CLAS = $("#ID_SUB_CLAS").kendoComboBox({
            autoBind: false,
            index: -1,
            dataTextField: "NAM_CATE",
            filter: "contains",
            cascadeFrom: "ID_CLAS",
            dataValueField: "ID_CATE",
            dataSource: {
                serverFiltering: true,
                schema: {
                    data: "Data",
                    total: "Count"
                },
                transport: {
                    read: "/CategoryTicket/ListCategory?var=" + Math.random()
                }
            }
        }).data("kendoComboBox");
        var UserId = $("#UserId").kendoComboBox({
            autoBind: false,
            index: -1,
            dataTextField: "USUARIO",
            filter: "contains",
            //template: '<div style="text-transform:capitalize; display: inline-block; width:100%;">' +
            //                          '<div style="float:left;">${data.ASSI}</div>' +
            //                          '<div style="float:right; ">(WL ${data.WorkLoad})</div>' +
            //                      '</div>',
            dataValueField: "UserId",
            dataSource: {
                //type: "odata",
                serverFiltering: false,
                schema: {
                    data: "Data",
                    total: "Count"
                },
                transport: {
                    read: "/Ticket/PersonCreateTicket?var=" + Math.random()
                }
            }
        }).data("kendoComboBox");
        var ID_PERS_ENTI = $("#ID_PERS_ENTI").kendoComboBox({
            autoBind: false,
            cascadeFrom: "ID_COMP",
            filter: "contains",
            dataTextField: "CLIE",
            dataValueField: "ID_PERS_ENTI",
            delay: 500,
            minLength: 0,
            suggest: true,
            dataSource: {
                serverFiltering: true,
                schema: {
                    data: "Data",
                    total: "Count"
                },
                transport: {
                    read: "/AccountEntity/RequesterByCIA?_=" + Math.random()
                }
            }
        }).data("kendoComboBox");
        var ID_PERS_ENTI_END = $("#ID_PERS_ENTI_END").kendoComboBox({
            autoBind: false,
            cascadeFrom: "ID_COMP",
            filter: "contains",
            dataTextField: "CLIE",
            dataValueField: "ID_PERS_ENTI",
            delay: 500,
            minLength: 0,
            suggest: true,
            dataSource: {
                serverFiltering: true,
                schema: {
                    data: "Data",
                    total: "Count"
                },
                transport: {
                    read: "/AccountEntity/RequesterByCIA?var=" + Math.random()
                }
            }
        }).data("kendoComboBox");
        var ID_TYPE_TICK = $("#ID_TYPE_TICK").kendoComboBox({
            autoBind: false,
            index: 0,
            dataTextField: "NAM_TYPE_TICK",
            dataValueField: "ID_TYPE_TICK",
            suggest: true,
            dataSource: {
                serverFiltering: false,
                schema: {
                    data: "Data",
                    total: "Count"
                },
                transport: {
                    read: "/TypeTicket/List?var=" + Math.random()
                }
            }
        }).data("kendoComboBox");
        var ID_PRIO = $("#ID_PRIO").kendoComboBox({
            autoBind: false,
            //index: 1,
            //cascadeFrom: "ID_PERS_ENTI_END",
            //placeholder: "Select Priority...",
            dataTextField: "NAM_PRIO",
            dataValueField: "ID_PRIO",
            dataSource: {
                //type: "odata",
                serverFiltering: false,
                schema: {
                    data: "Data",
                    total: "Count"
                },
                transport: {
                    read: "/Priority/List"
                }
            }
        }).data("kendoComboBox");

        var ID_SOUR = $("#ID_SOUR").kendoComboBox({
            index: 1,
            autoBind: false,
            dataTextField: "NAM_SOUR",
            dataValueField: "ID_SOUR",
            suggest: true,
            dataSource: {
                schema: {
                    data: "Data",
                    total: "Count"
                },
                transport: {
                    read: "/SourceTicket/List"
                }
            }
        }).data("kendoComboBox");

        var ID_PERS_ENTI_ASSI = $("#ID_PERS_ENTI_ASSI").kendoComboBox({
            autoBind: false,
            //index: 1,
            //cascadeFrom: "ID_QUEU",
            filter: "contains",
            dataTextField: "ASSI",
            //template: '<div style="text-transform:capitalize; display: inline-block; width:100%;">' +
            //    '<div style="float:left;letter-spacing:-1px;">${data.ASSI}</div>' +
            //    '<div style="float:right; ">(WL ${data.WorkLoad})</div>' +
            //    '</div>',
            dataValueField: "ID_PERS_ENTI",
            dataSource: {
                //type: "odata",
                data: listAssigned.Data,
                serverFiltering: false,
                //schema: {
                //    data: "Data",
                //    total: "Count"
                //}
                //transport: {
                //    read: "/AccountEntity/AssigneForFind?var=" + Math.random()
                //}
            }
        }).data("kendoComboBox");

        var START_DATE = $("#START_DATE").kendoDateTimePicker().data("kendoDateTimePicker");
        var END_DATE = $("#END_DATE").kendoDateTimePicker().data("kendoDateTimePicker");
        var FechaProgramada = $("#FechaProgramada").kendoDateTimePicker().data("kendoDateTimePicker");
    }

    async function cargarContenido() {
        //Carga de formulario
        $("#pie").empty()

        $("#pie").append("<div id='Mensaje' style='text-align: center;'>" +
                         "<br /><br /><br /><br /><br /><br /><h4>Cargando...</h4><br /><img src='../../Images/spinner.gif' style='height: 30%; width: 30%; text-align: center;'></div>");
        $("#line").empty()

        $("#line").append("<div id='Mensaje' style='text-align: center;'>" +
            "<br /><br /><br /><br /><br /><br /><h4>Cargando...</h4><br /><img src='../../Images/spinner.gif' style='height: 30%; width: 30%; text-align: center;'></div>");

        $("#listViewFindTicket").empty()
        $("#listViewFindTicket").append("<div id='Mensaje' style='text-align: center;'>" +
            "<br /><br /><br /><br /><br /><br /><h4>Cargando Tickets ...</h4><br /><img src='../../Images/spinner.gif' style='height: 40px; width: 40px; text-align: center;'></div>");

        await Promise.all([
            loadListCompanyByAccount(),
            loadListByAcco(),
            loadAssigned()
        ])
        .then((results) => {
            document.getElementById("loading").style.display = "none"
            cargarContenidoFormulario(results)
        })

        if(parseInt(@Session["ID_ACCO"]) == 1 || parseInt(@Session["ID_ACCO"]) == 25 || parseInt(@Session["ID_ACCO"]) == 4){
            await Promise.all([
                loadListTickets().then(result => {
                    ListarTicketPorEstado(result)
                })
            ])

        }
        else {
            await Promise.all([
                loadListGraphics().then(result => {
                    Graficos(result)
                }),
                loadListTickets().then(result => {
                    ListarTicketPorEstado(result)
                })
            ])

        }
    }

    $(document).ready(function () {
        cargarContenido()

    });

    function cambioIdiomaTexto() {
        idIdioma = $("#IdIdioma").val();
        if (idIdioma != 0) {
            $.ajax({
                url: "/Account/cambioIdiomaTexto?IdIdioma=" + idIdioma,
                type: "GET",
                cache: false,
                dataType: "json",
                success: function (source) {
                    data = source;
                    var valTextos = new Array()
                    $.each(data['Data'], function (index) {
                        valTextos.push((data['Data'][index]));
                    });
                    for (var i = 0; i < valTextos.length; i++) {
                        var valores = valTextos[i].split("|");
                        var valorLlave = valores[1];
                        var valorTexto = valores[0];
                        var clases = document.getElementsByClassName(valorLlave);
                        for (var j = 0; j < clases.length; j++) {
                            clases[j].innerText = valorTexto;
                        }
                    }
                },
                error: function (source) {
                }
            });
        }
    }

    function traducir(idIdioma, llave) {
        idIdioma = $("#IdIdioma").val();
        if (idIdioma != 0) {
            $.ajax({
                url: "/Idioma/traducir?llave=" + llave + "&IdIdioma=" + idIdioma,
                type: "GET",
                dataType: "text",
                cache: false,
                succes: function (data) {
                    return (data);
                }
            })
        }
    }


    var DivHeight = $("#divFindTicket").height();
    $("#divIntervalDate").height(DivHeight);
    $("#divByStatus").height(DivHeight);
    //$("#pie").height(DivHeight - 2);
    //$("#line").height(DivHeight - 2);

</script>



<script type="text/x-kendo-tmpl" id="template">
    <a href="${URL}${ID_INCI}" class="text-decoration-none" target="_blank">
        <div class="card-body py-3 btn-shadow btn-outline-focus">
            <div class="row no-gutters align-items-center">
                <div class="col-4">
                    <div class="small">
                        ${NAM_TYPE_TICK} ${COD_INCI}
                    </div>

                    # if (VIS_COMP) { #
                    <div class="small"><b>${REQU} </b></div>
                    # } else { #
                    <div class="small"><b>${REQU}</b></div>
                    # } #
                    <div class="small">Creado: ${CREATEBY} ${CREATE_INCI}</div>
                    <div class="small">Actualizado: ${MODIFIED_INCI}</div>
                </div>
                <div class="col-6">
                    <div class="small">Asignado a: ${ASSI}</div>
                    <div class="small">${NAM_CATE} > ${NAM_SUBC} > </div>
                </div>
                <div class="d-none d-md-block col-2">
                    <div class="row no-gutters align-items-center">

                        <div class="media col-12 align-items-center">

                            <div class="media-body flex-truncate ml-2">

                                # if(NAM_PRIO.indexOf("p1") > -1) {#
                                <div class="badge badge-danger"> ${NAM_STAT} | ${NAM_PRIO} </div>
                                # } #
                                # if(NAM_PRIO.indexOf("p2") > -1) {#
                                <div class="badge badge-warning"> ${NAM_STAT} | ${NAM_PRIO}</div>
                                # } #
                                # if(NAM_PRIO.indexOf("p3") > -1) {#
                                <div class="badge badge-success"> ${NAM_STAT} | ${NAM_PRIO}</div>
                                # } #
                                # if(NAM_PRIO.indexOf("p4") > -1) {#
                                <div class="badge badge-info"> ${NAM_STAT} | ${NAM_PRIO}</div>
                                # } #
                                # if(NAM_PRIO.indexOf("p5") > -1) {#
                                <div class="badge badge-dark"> ${NAM_STAT} | ${NAM_PRIO}</div>
                                # } #

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </a>

</script>

<script type="text/javascript">


    function Graficos(json) {
        //$("#pie").empty()

        //$("#pie").append("<div id='Mensaje' style='text-align: center;'>" +
        //                 "<br /><br /><br /><br /><br /><br /><h4>Cargando...</h4><br /><img src='../../Images/spinner.gif' style='height: 30%; width: 30%; text-align: center;'></div>");
        //$("#line").empty()

        //$("#line").append("<div id='Mensaje' style='text-align: center;'>" +
        //                  "<br /><br /><br /><br /><br /><br /><h4>Cargando...</h4><br /><img src='../../Images/spinner.gif' style='height: 30%; width: 30%; text-align: center;'></div>");
        var IdEstados = new String($("#ID_STAT_END").val());

        if (IdEstados == null || IdEstados == "null"){
            IdEstados = 0;
        }
        //Crear Grafica
        var CatLine = new Array();
        var CloseLine = new Array();
        var ActiveLine = new Array();
        var ScheduledLine = new Array();

        $.each(json['legend'], function (index, value) {
            CatLine[index] = value['name'] + ' ' + value['Year'].toString().substring(2, 4);
            CloseLine[index] = null;
            ActiveLine[index] = null;
            ScheduledLine[index] = null;
        });


        $.each(json['lineClose'], function (index, value) {
            var i = CatLine.indexOf(value['name'] + ' ' + value['Year'].toString().substring(2, 4));
            CloseLine[i] = value['RES_COUN'];
        });

        $.each(json['lineOpen'], function (index, value) {
            var x = CatLine.indexOf(value['name'] + ' ' + value['Year'].toString().substring(2, 4));
            ActiveLine[x] = value['RES_COUN'];
        });

        $.each(json['lineScheduled'], function (index, value) {
            var y = CatLine.indexOf(value['name'] + ' ' + value['Year'].toString().substring(2, 4));
            ScheduledLine[y] = value['RES_COUN'];
        });

        $('#pie').highcharts({
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false
            },
            title: {
                text: null
            },
            subtitle: {
                text: 'Desde' + ' '
                    + json['From'] + ' '+ 'Hasta' +' '
                    + json['To'] + '<br>' + 'Cuenta' + ': ' + json['CountClose']
            },
            credits: {
                enabled: false
            },
            tooltip: {
                pointFormat: 'Percentage: <b>{point.percentage:.2f}%</b><br>Quantity: <b>{point.y}</b>',
                percentageDecimals: 2
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    size: '55%',
                    showInLegend: true,
                    dataLabels: {
                        enabled: true,
                        color: '#000000',
                        connectorColor: '#000000',
                        format: '<b>{point.name}</b>: {point.percentage:.2f} %',
                        distance: -10
                    }
                }
            },
            series: [{
                type: 'pie',
                name: 'Browser share',
                data: json['Pie']
            }]
        });
        //fin pie

        //line
        $('#line').highcharts({
            chart: {
                type: 'line',
                marginRight: 10,
                marginTop: 20//,
                //marginBottom: 10
            },
            credits: {
                enabled: false
            },
            title: {
                text: null
            },
            subtitle: {
                text: null
            },
            xAxis: {
                categories: CatLine,
                gridLineWidth: 1
            },
            yAxis: {
                title: {
                    text: '@ResourceLanguaje.Resource.Tickets'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                crosshairs: true,
                shared: true
            },
            plotOptions: {
                line: {
                    lineWidth: 3,
                    marker: { symbol: 'circle' }
                }
            },
            //legend: {
            //    layout: 'horizontal',
            //    align: 'center',
            //    verticalAlign: 'bottom',
            //    x: -10,
            //    y: 100,
            //    borderWidth: 0
            //},
            series: [{
                name: 'Cerrado',
                data: CloseLine,
                color: "#516882"
            },
            {
                name: 'Activo',
                data: ActiveLine,
                color: "#B21E1E"
            },
            {
                name: 'Programado',
                data: ScheduledLine,
                color: "#FFBB00"
            }]
        });
        //fin line

        //AJAX PARA GRÁFICAS
        //$.ajax({
        //    /*url: "/Ticket/FindResultGrafico/0?" + $('#FrmFindTicket').serialize() + "&IdEstados=" + IdEstados+ "&skip=0&take=0",*/
        //    url: "/Ticket/FindResultTicket/0?" + $('#FrmFindTicket').serialize() + "&IdEstados=" + IdEstados,
        //    dataType: 'json',
        //    cache: false,
        //    async: true,
        //    success: function (json) {

        //    }

        //});

        //top.cambioIdiomaxLLave("Asignadoa|Creadopor|Creado|UltimaAct");

    }
    //textbox
    $("#COD_TICK").kendoTextBox({
        placeholder: "",
        label: {
            content: "Código del Ticket",
    /*        floating: true*/
        }
    });
    $("#SUM_TICK").kendoTextBox({
        placeholder: "",
        label: {
            content: "Comentario",
            /*        floating: true*/
        }
    });

    $("#find").click(function (event) {
        event.preventDefault();
        actualizarContenido();
    });

    //cambioIdiomaxLlave('Asignadoa|Creadopor|Creado|UltimaAct');
    function ListarTicketPorEstado(Data) {
        toastr.warning('Límite: 1000 registros.<br/>Para mejorar su búsqueda agregar parámetros adicionales.');
        var IdEstados = new String($("#ID_STAT_END").val());

        if (IdEstados == null || IdEstados == "null") {
            IdEstados = 0;
        }

        $("#listViewFindTicket").empty();
        $("#listViewFindTicket").kendoListView({
            dataSource: {
                data:Data,
                schema: {
                    data: "Data",
                    total: "Count"
                },
                pageSize: 10
            },
            template: kendo.template($("#template").html()),
            pageable: true
        });
    }
    //ListarTicketPorEstado();
    function Exportar() {
        var IdEstados = new String($("#ID_STAT_END").val());

        if (IdEstados == null || IdEstados == "null") {
            IdEstados = 0;
        }
        $("#HD_Estados").val(IdEstados);

        var estados = $("#ID_STAT_END option:selected").map(function () {
            return $(this).text();
        }).get().join(',');
        $("#Estados").val(estados);

        var ops = $("#IdProyectoSLA option:selected").map(function () {
            return $(this).text();
        }).get().join(',');
        $("#OPS").val(ops);

        var ops = $("#ID_COMP_END option:selected").map(function () {
            return $(this).text();
        }).get().join(',');
        $("#CompsFinal").val(ops);
    }

    function cambioIdiomaPorPalabras(palabras) {
        idIdioma = $("#IdIdioma").val();
        var palabra;
        palabra = palabras.split("|");
        if (idIdioma != 0) {
            $.ajax({
                url: "/Account/cambioIdiomaTexto?IdIdioma=" + idIdioma,
                type: "GET",
                cache: false,
                dataType: "json",
                success: function (source) {
                    data = source;
                    var valTextos = new Array()
                    $.each(data['Data'], function (index) {
                        valTextos.push((data['Data'][index]));
                    });
                    var newValTexto = [];
                    for (var c = 0; c < valTextos.length; c++) {
                        for (var k = 0; k < palabra.length; k++) {
                            if (valTextos[c].split('|')[1] == palabra[k]) {
                                newValTexto.push(valTextos[c]);
                            }
                        }
                    }
                    for (var i = 0; i < newValTexto.length; i++) {
                        var valores = newValTexto[i].split("|");
                        var valorLlave = valores[1];
                        var valorTexto = valores[0];
                        var clases = document.getElementsByClassName(valorLlave);
                        for (var j = 0; j < clases.length; j++) {
                            clases[j].innerText = valorTexto;
                        }
                    }
                },
                error: function (source) {
                }
            });
        }
    }

    function cambioIdiomaxLlave(llaves) {
        idIdioma = $("#IdIdioma").val();
        if (idIdioma != 0) {
            $.ajax({
                url: "/Account/cambioIdiomaxLlave?llaves=" + llaves,
                type: "GET",
                cache: false,
                dataType: "json",
                success: function (source) {

                    //alert(source);
                    //alert(JSON.stringify(source));

                    data = source;
                    var valTextos = new Array()
                    $.each(data['Data'], function (index) {
                        valTextos.push((data['Data'][index]));
                    });
                    for (var i = 0; i < valTextos.length; i++) {
                        var valores = valTextos[i].split("|");
                        var valorLlave = valores[1];
                        var valorTexto = valores[0];
                        var clases = document.getElementsByClassName(valorLlave);
                        for (var j = 0; j < clases.length; j++) {
                            clases[j].innerText = valorTexto;
                        }
                    }
                },
                error: function (source) {
                }
            });
        }
    }
</script>
